package main

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"time"
)

type Streebog struct {
	h      [64]byte
	N      [64]byte
	Sigma  [64]byte
	buffer [64]byte
	size   int
	is256  bool
}

var (
	pi = [256]byte{
		0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
		0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
		0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
		0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
		0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
		0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
		0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
		0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
		0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
		0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
		0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
		0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
		0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
		0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
		0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
		0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6,
	}

	tau = [64]byte{
		0, 8, 16, 24, 32, 40, 48, 56,
		1, 9, 17, 25, 33, 41, 49, 57,
		2, 10, 18, 26, 34, 42, 50, 58,
		3, 11, 19, 27, 35, 43, 51, 59,
		4, 12, 20, 28, 36, 44, 52, 60,
		5, 13, 21, 29, 37, 45, 53, 61,
		6, 14, 22, 30, 38, 46, 54, 62,
		7, 15, 23, 31, 39, 47, 55, 63,
	}

	A = [64]byte{
		0x8e, 0x20, 0xfa, 0xa7, 0x2b, 0xa0, 0xb4, 0x70,
		0x47, 0x10, 0x7d, 0xdd, 0x9b, 0x50, 0x5a, 0x38,
		0xad, 0x08, 0xb0, 0xe0, 0xc3, 0x28, 0x2d, 0x1c,
		0xd8, 0x04, 0x58, 0x70, 0xef, 0x14, 0x98, 0x0e,
		0x6c, 0x02, 0x2c, 0x38, 0xf9, 0x0a, 0x4c, 0x07,
		0x36, 0x01, 0x16, 0x1c, 0xf2, 0x05, 0x26, 0x8d,
		0x1b, 0x8e, 0x0b, 0x0e, 0x79, 0x8c, 0x13, 0xc8,
		0x83, 0x47, 0x8b, 0x07, 0xb2, 0x46, 0x87, 0x64,
	}
)

func New256() *Streebog {
	s := &Streebog{is256: true}
	s.Reset()
	return s
}

func (s *Streebog) Reset() {
	if s.is256 {
		for i := 0; i < 64; i++ {
			s.h[i] = 0x01
		}
	} else {
		for i := 0; i < 64; i++ {
			s.h[i] = 0x00
		}
	}
	s.N = [64]byte{}
	s.Sigma = [64]byte{}
	s.size = 0
}

func (s *Streebog) Write(data []byte) (int, error) {
	length := len(data)
	if length == 0 {
		return 0, nil
	}

	left := 64 - s.size
	if length < left {
		copy(s.buffer[s.size:], data)
		s.size += length
		return length, nil
	}

	copy(s.buffer[s.size:], data[:left])
	data = data[left:]
	s.compress(s.buffer[:])

	for len(data) >= 64 {
		s.compress(data[:64])
		data = data[64:]
	}

	s.size = copy(s.buffer[:], data)
	return length, nil
}

func (s *Streebog) Sum(b []byte) []byte {
	s0 := *s
	hash := s0.checkSum()
	return append(b, hash...)
}

func (s *Streebog) checkSum() []byte {
	buf := make([]byte, 64)
	buf[0] = 0x01

	padded := 64 - s.size
	if s.size < 64 {
		copy(s.buffer[s.size:], buf[:padded])
	}

	s.compress(s.buffer[:])

	var g [64]byte
	copy(g[:], s.h[:])

	h := [64]byte{}
	copy(h[:], s.h[:])

	s.addMod512(&s.N, s.buffer[:])
	s.compress(g[:])

	s.addMod512(&s.Sigma, s.buffer[:])
	s.compress(h[:])

	if s.is256 {
		return h[32:]
	}
	return h[:]
}

func (s *Streebog) addMod512(a *[64]byte, b []byte) {
	var t uint16
	for i := 63; i >= 0; i-- {
		t = uint16(a[i]) + uint16(b[i]) + (t >> 8)
		a[i] = byte(t & 0xFF)
	}
}

func (s *Streebog) compress(m []byte) {
	var K [64]byte
	copy(K[:], s.h[:])

	var t [64]byte
	copy(t[:], m[:])

	s.addMod512(&s.N, m)
	s.addMod512(&s.Sigma, m)

	for i := 0; i < 12; i++ {
		for j := 0; j < 8; j++ {
			s.LPS(&K)
			for k := 0; k < 64; k++ {
				K[k] ^= A[(8*j+k)%64]
			}
		}

		for j := 0; j < 64; j++ {
			K[j] ^= t[j]
		}

		s.LPS(&K)
		for j := 0; j < 64; j++ {
			K[j] ^= s.h[j]
		}

		copy(s.h[:], K[:])
	}
}

func (s *Streebog) LPS(state *[64]byte) {
	var temp [64]byte
	for i := 0; i < 64; i++ {
		temp[i] = pi[state[tau[i]]]
	}

	for i := 0; i < 8; i++ {
		var v uint64
		for j := 0; j < 8; j++ {
			v |= uint64(temp[8*i+j]) << (56 - 8*j)
		}
		v = (v >> 61) | (v << 3)
		for j := 0; j < 8; j++ {
			temp[8*i+j] = byte(v >> (56 - 8*j))
		}
	}

	copy(state[:], temp[:])
}

func KDF_TREE_GOSTR3411_2012_256(masterKey []byte, label, seed []byte, i uint32, keyLen int) []byte {
	data := make([]byte, 0, len(masterKey)+len(label)+len(seed)+4+1)
	data = append(data, masterKey...)
	data = append(data, label...)
	data = append(data, seed...)

	iBytes := make([]byte, 4)
	binary.BigEndian.PutUint32(iBytes, i)
	data = append(data, iBytes...)

	hash0 := New256()
	hash0.Write(append(data, 0x00))
	part0 := hash0.Sum(nil)

	hash1 := New256()
	hash1.Write(append(data, 0x01))
	part1 := hash1.Sum(nil)

	derivedKey := append(part0, part1...)

	if keyLen > 0 && keyLen < len(derivedKey) {
		return derivedKey[:keyLen]
	}

	return derivedKey
}

func main() {
	masterKey := make([]byte, 32)
	if _, err := rand.Read(masterKey); err != nil {
		panic(err)
	}

	label := []byte("key-diversification")
	seed := []byte{0x01, 0x02, 0x03, 0x04}

	testKeyGeneration := func(n int) {
		start := time.Now()
		for i := 0; i < n; i++ {
			_ = KDF_TREE_GOSTR3411_2012_256(masterKey, label, seed, uint32(i), 32)
		}
		duration := time.Since(start)
		fmt.Printf("Generated %d keys in %v (%.2f keys/sec)\n",
			n, duration, float64(n)/duration.Seconds())
	}

	testKeyGeneration(10_000)
	testKeyGeneration(100_000)
	testKeyGeneration(1_000_000)

	key := KDF_TREE_GOSTR3411_2012_256(masterKey, label, seed, 0, 32)
	fmt.Println("First key:", hex.EncodeToString(key))
}
